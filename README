Write-up for PA5
----------------


We mostly followed the sample output for designing the layout of the global data, with only a few changes. We made sure that our data section was right by writing a bunch of test scripts to diff against and although there would be some differences (class tag numbers being the most obvious one), testing was useful to ensure correctness.

Translating code to assembly for the most part is fairly straightfoward, with a few outliers. All arithmatic, for instance, has standard MIPS equivalents. 

Statements with labels require a slight trick: you must set the labels first, before you evaluate any code, and then use the branches to branch to the labels you set previously. 

In order to get variables to work, we needed to actively maintain a symbol table throughout the entire parse of the AST. We inserted variables when they came in scope and removed after they left. To make this useful, as the value to the key we would store a) whether they were a heap or stack variable, and b) their offset (from $s0 or $fp respectively).

We tested our codegen against all of the files provided in the examples/ folder, and then coded a few of our own for good measure. We feel that this certainly provideed adequate coverate of cool expressions and idioms, and this was the way in which we got rid of most of our bugs.

We decided to abstract out the handling of stack variables into helper functions as to simplify our code in other areas (aka let, case). We further abstracted this code out to get and load variable helper functions to minimize code fragmentation.

When we accessed objects, or changed them in some way (particularly ints) we realized that it was best to depend on cloning the object as to not effect any old copies of that object.

Code gen for things like dispatch and was not necessarily more tricky, but certainly more error prone; care had to be taken in order to get the order of arguments correctly. Static dispatch and dispatch were mostly similar, care had to be taken to make sure that the arguments and the expression were evaluated in the right order.

Case was complicated because it involves a runtime type check and also, could generate two run-time errors. During runtime, the dynamic type of the evaluated expression (which means a bunch of classTags have to be compared) has to be compared with a bunch of other types in the cases. For this, the order of comparison against the types in the branches is important because we want to find the type that is the closest supertype of the dynamic type. Hence, we generate a inheritance tree and then, pick a classTag for each subtype in a recursive in-order transversal manner. Then, for every class, we have a range of values such that any class tag within that range will be its subclass. We can just use less than and greater than comparisons after that to determine if the dynamic type matches. If it does, we execute that branch and if not, we go on to check the condition for the next branch.

